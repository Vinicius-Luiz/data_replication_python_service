from ui.components.DisplayTransformation import DisplayTransformation
from ui.components.DisplayErrorHandling import DisplayErrorHandling
from ui.components.DisplayTaskCreatorAI import DisplayTaskCreatorAI
from ui.components.DisplayTaskSettings import DisplayTaskSettings
from ui.components.DisplayConections import DisplayConnections
from ui.components.DisplayHomePage import DisplayHomePage
from ui.components.DisplayTables import DisplayTables
from ui.components.DisplayFilter import DisplayFilter
from time import sleep
import streamlit as st



class UIComponents:
    """Gerencia os componentes da interface do usu√°rio."""

    def __init__(self):
        """Inicializa os componentes da interface."""
        self.display_home_page = DisplayHomePage()
        self.display_connections = DisplayConnections()
        self.display_task_settings = DisplayTaskSettings()
        self.display_tables = DisplayTables()
        self.display_filter = DisplayFilter()
        self.display_transformation = DisplayTransformation()
        self.display_error_handling = DisplayErrorHandling()
        self.display_task_creator_ai = DisplayTaskCreatorAI()

        # Define o layout da p√°gina
        st.set_page_config(
            page_title="TREMpy - Transactional Replication Engine Made in Python",
            page_icon="üöÇ",
            layout="wide",
            initial_sidebar_state="expanded"
        )

    def display_sidebar(self):
        """Exibe a barra lateral de navega√ß√£o."""
        with st.sidebar:
            st.image("_images/logo-white.png", use_container_width = True, channels="RGB")

            
            # Grupo: Configura√ß√µes B√°sicas
            st.sidebar.markdown("### ‚öôÔ∏è Configura√ß√µes B√°sicas")
            if st.sidebar.button("DASHBOARD", use_container_width=True):
                st.session_state.current_page = "home"
            if st.sidebar.button("CONEX√ïES", use_container_width=True):
                st.session_state.current_page = "connections"
            if st.sidebar.button("TAREFA", use_container_width=True):
                st.session_state.current_page = "task"
                
            # Grupo: Configura√ß√µes de Dados
            st.sidebar.markdown("### üìö Configura√ß√µes de Dados")
            if st.sidebar.button("TABELAS", use_container_width=True):
                st.session_state.current_page = "tables"
            if st.sidebar.button("FILTROS", use_container_width=True):
                st.session_state.current_page = "filters"
            if st.sidebar.button("TRANSFORMA√á√ïES", use_container_width=True):
                st.session_state.current_page = "transformations"
                
            # Grupo: Configura√ß√µes Avan√ßadas
            st.sidebar.markdown("### üõ†Ô∏è Configura√ß√µes Avan√ßadas")
            if st.sidebar.button("TRATAMENTO DE ERROS", use_container_width=True):
                st.session_state.current_page = "error_handling"

            # Novo Grupo: IA & Automa√ß√£o
            st.sidebar.markdown("### üß† IA & Automa√ß√£o")
            if st.sidebar.button("ü§ñ TaskCreator AI", use_container_width=True, type="primary"):
                st.session_state.current_page = "taskcreator_ai"
            
            # Grupo: Importar/Exportar Configura√ß√µes
            st.sidebar.markdown("### üíæ Backup")
            action = st.sidebar.selectbox(
                "Configura√ß√µes",
                options=["üì§ Exportar", "üì• Importar", "üîÑ Redefinir"],
                key="settings_action",
                help="Selecione uma a√ß√£o para importar, exportar ou redefinir configura√ß√µes",
                label_visibility="collapsed"
            )
            
            if action == "üì§ Exportar":
                st.sidebar.download_button(
                    "Baixar settings.json",
                    data=open("task/settings.json", "r", encoding="utf-8").read(),
                    file_name="settings.json",
                    mime="application/json",
                    help="Exporta o arquivo de configura√ß√µes",
                    use_container_width=True,
                )
            elif action == "üì• Importar":
                uploaded_file = st.sidebar.file_uploader(
                    "Selecione o arquivo settings.json",
                    type=["json"],
                    help="Importa um arquivo de configura√ß√µes",
                    label_visibility="collapsed"
                )
                if uploaded_file is not None:
                    try:
                        with open("task/settings.json", "w", encoding="utf-8") as f:
                            f.write(uploaded_file.getvalue().decode())
                        st.sidebar.success("Configura√ß√µes importadas com sucesso!")
                        st.rerun()
                    except Exception as e:
                        st.sidebar.error(f"Erro ao importar configura√ß√µes: {str(e)}")
            elif action == "üîÑ Redefinir":
                if st.sidebar.button(
                    "Confirmar Redefini√ß√£o",
                    help="Redefine todas as configura√ß√µes para o padr√£o",
                    type="primary",
                    use_container_width=True
                ):
                    try:
                        with open("task/settings.template.json", "r", encoding="utf-8") as template_file:
                            template_content = template_file.read()
                        with open("task/settings.json", "w", encoding="utf-8") as settings_file:
                            settings_file.write(template_content)
                        st.sidebar.success("Configura√ß√µes redefinidas com sucesso! Atualize a p√°gina")
                        sleep(5)
                        st.rerun()
                    except FileNotFoundError:
                        st.sidebar.error("Arquivo template n√£o encontrado. Verifique se task/settings.template.json existe.")
                    except Exception as e:
                        st.sidebar.error(f"Erro ao redefinir configura√ß√µes: {str(e)}")
            
            # Rodap√© da sidebar com √≠cones de redes sociais
            st.sidebar.markdown("---")
            col1, col2 = st.sidebar.columns(2)
            with col1:
                st.markdown(
                    """<a href="https://www.linkedin.com/in/vlsf2/" target="_blank">
                        <img src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white" />
                    </a>""",
                    unsafe_allow_html=True
                )
            with col2:
                st.markdown(
                    """<a href="https://github.com/Vinicius-Luiz/data_replication_python_service" target="_blank">
                        <img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" />
                    </a>""",
                    unsafe_allow_html=True
                )
            # Footer de vers√£o
            st.sidebar.markdown("<div style='text-align: center; color: gray; font-size: 0.9em; margin-top: 10px;'>Vers√£o: 1.0</div>", unsafe_allow_html=True)

    def display_content(self):
        """Exibe o conte√∫do principal baseado na p√°gina selecionada."""
        # Inicializa a p√°gina atual se necess√°rio
        if "current_page" not in st.session_state:
            st.session_state.current_page = "home"
            
        # Exibe o conte√∫do apropriado
        if st.session_state.current_page == "home":
            self.display_home_page.render()
        elif st.session_state.current_page == "connections":
            self.display_connections.render()
        elif st.session_state.current_page == "task":
            self.display_task_settings.render()
        elif st.session_state.current_page == "tables":
            self.display_tables.render()
        elif st.session_state.current_page == "filters":
            self.display_filter.render()
        elif st.session_state.current_page == "transformations":
            self.display_transformation.render()
        elif st.session_state.current_page == "error_handling":
            self.display_error_handling.render()
        elif st.session_state.current_page == "taskcreator_ai":
            self.display_task_creator_ai.render()

    def display_ui(self):
        """M√©todo principal para exibir a interface completa."""
        self.display_sidebar()
        self.display_content()
