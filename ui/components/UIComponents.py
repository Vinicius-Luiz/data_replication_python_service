from ui.components.DisplayTransformation import DisplayTransformation
from ui.components.DisplayErrorHandling import DisplayErrorHandling
from ui.components.DisplayTaskSettings import DisplayTaskSettings
from ui.components.DisplayConections import DisplayConnections
from ui.components.DisplayHomePage import DisplayHomePage
from ui.components.DisplayTables import DisplayTables
from ui.components.DisplayFilter import DisplayFilter
import streamlit as st


class UIComponents:
    """Gerencia os componentes da interface do usu√°rio."""

    def __init__(self):
        """Inicializa os componentes da interface."""
        self.home_page = DisplayHomePage()
        self.connections = DisplayConnections()
        self.task_settings = DisplayTaskSettings()
        self.tables = DisplayTables()
        self.display_filter = DisplayFilter()
        self.display_transformation = DisplayTransformation()
        self.error_settings = DisplayErrorHandling()

        # Define o layout da p√°gina
        st.set_page_config(
            page_title="TREMpy - Replica√ß√£o de Dados",
            page_icon="üöÇ",
            layout="wide",
            initial_sidebar_state="expanded"
        )

    def display_sidebar(self):
        """Exibe a barra lateral de navega√ß√£o."""
        with st.sidebar:
            st.title("üöÇ TREMpy")
            
            # Grupo: Configura√ß√µes B√°sicas
            st.sidebar.markdown("### ‚öôÔ∏è Configura√ß√µes B√°sicas")
            if st.sidebar.button("DASHBOARD", use_container_width=True):
                st.session_state.current_page = "home"
            if st.sidebar.button("CONEX√ïES", use_container_width=True):
                st.session_state.current_page = "connections"
            if st.sidebar.button("TAREFA", use_container_width=True):
                st.session_state.current_page = "task"
                
            # Grupo: Configura√ß√µes de Dados
            st.sidebar.markdown("### üìö Configura√ß√µes de Dados")
            if st.sidebar.button("TABELAS", use_container_width=True):
                st.session_state.current_page = "tables"
            if st.sidebar.button("FILTROS", use_container_width=True):
                st.session_state.current_page = "filters"
            if st.sidebar.button("TRANSFORMA√á√ïES", use_container_width=True):
                st.session_state.current_page = "transformations"
                
            # Grupo: Configura√ß√µes Avan√ßadas
            st.sidebar.markdown("### üõ†Ô∏è Configura√ß√µes Avan√ßadas")
            if st.sidebar.button("TRATAMENTO DE ERROS", use_container_width=True):
                st.session_state.current_page = "error_handling"
            
            # Rodap√© da sidebar com √≠cones de redes sociais
            st.sidebar.markdown("---")
            col1, col2 = st.sidebar.columns(2)
            with col1:
                st.markdown(
                    """<a href="https://www.linkedin.com/in/vlsf2/" target="_blank">
                        <img src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white" />
                    </a>""",
                    unsafe_allow_html=True
                )
            with col2:
                st.markdown(
                    """<a href="https://github.com/Vinicius-Luiz/data_replication_python_service" target="_blank">
                        <img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" />
                    </a>""",
                    unsafe_allow_html=True
                )

    def display_content(self):
        """Exibe o conte√∫do principal baseado na p√°gina selecionada."""
        # Inicializa a p√°gina atual se necess√°rio
        if "current_page" not in st.session_state:
            st.session_state.current_page = "home"
            
        # Exibe o conte√∫do apropriado
        if st.session_state.current_page == "home":
            self.home_page.render()
        elif st.session_state.current_page == "connections":
            self.connections.render()
        elif st.session_state.current_page == "task":
            self.task_settings.render()
        elif st.session_state.current_page == "tables":
            self.tables.render()
        elif st.session_state.current_page == "filters":
            self.display_filter.render()
        elif st.session_state.current_page == "transformations":
            # self.__display_transformations()
            self.display_transformation.render()
        elif st.session_state.current_page == "error_handling":
            self.error_settings.render()

    def __display_transformations(self):
        """Exibe a p√°gina de transforma√ß√µes (placeholder)."""
        st.header("üîÑ Transforma√ß√µes")
        st.info(
            """
            Esta se√ß√£o permitir√° configurar transforma√ß√µes nos dados durante a replica√ß√£o.
            Funcionalidade em desenvolvimento.
            """
        )

    def display_ui(self):
        """M√©todo principal para exibir a interface completa."""
        self.display_sidebar()
        self.display_content()
